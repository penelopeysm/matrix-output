---
name: Matrix Output
description: Collect outputs from each matrix job.
branding:
  icon: layers
  color: orange
inputs:
  yaml:
    description: >-
      A string representing YAML data. Typically, a simple dictionary of key/value pairs.
    type: string
    required: true
  debug:
    description: >-
      Enable debug logging for this specific action.
    type: string
    default: "false"
outputs:
  json:
    description: >-
      A string representing a JSON list of dictionaries. Each dictionary in the list
      contains the output for a single job from the job matrix. The order of this list
      corresponds to the job index (i.e. `strategy.job-index`).
    value: ${{ steps.merge.outputs.json }}
runs:
  using: composite
  steps:
    - id: job
      uses: penelopeysm/job-context@main
    - name: Generate job output
      shell: bash
      run: |
        input_json="$(yq -o=json <<<"${input_yaml:?}")"
        jq -ne \
            --argjson metadata "{\"job-id\": ${self_job_id:?}}" \
            --argjson outputs "${input_json:?}" \
            '$ARGS.named' | tee -a job-output.json
        touch job-sync
      env:
        input_yaml: ${{ inputs.yaml }}
        self_job_id: ${{ steps.job.outputs.id }}
    - name: Upload job output
      uses: actions/upload-artifact@v4
      with:
        name: matrix-output-${{ github.job }}-${{ strategy.job-index }}
        path: job-output.json
        if-no-files-found: error
    - name: Download job matrix outputs
      uses: actions/download-artifact@v4
      with:
        pattern: matrix-output-${{ github.job }}-*
        path: matrix-output
        merge-multiple: false
    - name: Determine artifact jobs
      id: artifact-jobs
      shell: bash
      run: |
        # Determine artifact jobs
        jobs="$(jq -rs '[.[].metadata."job-id"] | to_entries | map({id: .value, index: .key})' matrix-output/*/*.json)"

        if [[ "$RUNNER_DEBUG" -eq 1 ]] || [[ "${{ inputs.debug }}" == "true" ]]; then
            echo "Artifact jobs:" >&2
            jq '.' <<<"${jobs}" >&2
        fi

        # Specify our multiline output using GH action flavored heredocs
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        {
            echo "json<<EOF"
            jq '.' <<<"${jobs}"
            echo "EOF"
        } >>"$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
    # An alternate version of `/repos/{owner}/{repo}/actions/runs/${run_id}/attempts/${run_attempt}/jobs`
    # which reports only jobs which were actually executed. Mainly, this results in
    # different values for `id`, `run_attempt`, and `created_at` being returned.
    #
    # Specifically, this alternate version is needed such that the `job-id` written to the
    # `matrix-output` artifact matches the job `id` from the GitHub API for jobs which were
    # not re-run.
    - name: Determine executed jobs
      id: executed-jobs
      shell: bash
      run: |
        # Determine executed jobs

        # Fetch the jobs for the current and all previous run attempts. We are not using
        # the GitHub API endpoint `/repos/{owner}/{repo}/actions/runs/{run_id}/jobs?filter=all`
        # here as it has proven to be unreliable and does not include running jobs.
        jobs='[]'
        for attempt in $(seq 1 ${run_attempt}); do
            attempt_jobs="$(gh api -X GET --paginate "/repos/{owner}/{repo}/actions/runs/${run_id:?}/attempts/${attempt:?}/jobs" --jq '.jobs')"

            # Remove job entries which weren't actually executed during this attempt.
            # The GitHub API includes new `job_id`s for each `run_attempt` and we want to
            # exclude these entries as we only want jobs which have actually executed.
            attempt_jobs="$(jq 'map(select(.completed_at == null or .completed_at >= .created_at))' <<<"${attempt_jobs}")"

            # Concatenate jobs
            jobs="$(jq -e -s '.[0] + .[1]' <(echo "$jobs") <(echo "$attempt_jobs"))"
        done

        # Remove older jobs which were re-run
        jobs="$(jq 'sort_by(.created_at) | reverse | unique_by(.name)' <<<"${jobs}")"

        if [[ "$RUNNER_DEBUG" -eq 1 ]] || [[ "${{ inputs.debug }}" == "true" ]]; then
            echo "Executed jobs:" >&2
            jq '[.[] | {id, name, run_id, run_attempt, created_at, completed_at, conclusion}]' <<<"${jobs}" >&2
        fi

        {
            echo "json<<EOF"
            jq '.' <<<"${jobs}"
            echo "EOF"
        } >>"$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
        run_id: ${{ github.run_id }}
        run_attempt: ${{ github.run_attempt }}
    - name: Determine matrix jobs
      id: matrix-jobs
      shell: bash
      run: |
        # Determine matrix jobs
        executed_jobs="$(jq '[.[] | {id, name, conclusion}]' <<<"${executed_jobs:?}")"

        # Combine the `executed_jobs` into the `artifact_jobs` data (left join) to produce list of jobs in the matrix.
        # For more info on `jq`'s SQL style JOIN see: https://qmacro.org/blog/posts/2022/06/23/understanding-jq%27s-sql-style-operators-join-and-index/
        matrix_jobs="$(jq -n --argjson aj "${artifact_jobs}" --argjson ej "${executed_jobs}" '[JOIN(INDEX($ej[]; .id); $aj[]; (.id | tostring); add)]')"

        num_jobs="$(jq length <<<"${matrix_jobs}")"
        num_running_jobs="$(jq 'map(select(.conclusion == null)) | length' <<<"${matrix_jobs}")"

        echo "Matrix outputs produced: ${num_jobs}/${{ strategy.job-total }}" >&2
        echo "Running jobs remaining: ${num_running_jobs}" >&2

        if [[ "$RUNNER_DEBUG" -eq 1 ]] || [[ "${{ inputs.debug }}" == "true" ]]; then
            echo "Matrix jobs:" >&2
            jq '.' <<<"${matrix_jobs}" >&2
        fi

        {
            echo "num=${num_jobs}"
            echo "num-running=${num_running_jobs}"

            echo "json<<EOF"
            jq '.' <<<"${matrix_jobs}"
            echo "EOF"
        } >>"$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
        artifact_jobs: ${{ steps.artifact-jobs.outputs.json }}
        executed_jobs: ${{ steps.executed-jobs.outputs.json }}
    - name: Upload sync artifact
      uses: actions/upload-artifact@v4
      if: ${{ steps.matrix-jobs.outputs.num == strategy.job-total && steps.matrix-jobs.outputs.num-running > 1 }}
      with:
        name: matrix-output-sync-${{ github.job }}-${{ strategy.job-index }}
        path: job-sync
    - id: wait
      if: ${{ steps.matrix-jobs.outputs.num == strategy.job-total && steps.matrix-jobs.outputs.num-running > 1 }}
      shell: bash
      run: |
        # Wait for running matrix jobs
        start=$(date +%s)

        # Wait for remaining running jobs (excluding ourself)
        readarray -t remaining_job_ids <<<"$(jq -r --argjson self "${self_job_id}" '.[] | select(.conclusion == null and .id != $self) | .id' <<<"${matrix_jobs}")"

        while [[ ${#remaining_job_ids[@]} -gt 0 ]]; do
            job_id="${remaining_job_ids[0]}"
            echo "Waiting for $job_id" >&2

            # Check if the job is also waiting
            job_index="$(jq --argjson id "${job_id}" '.[] | select(.id == $id).index' <<<"${matrix_jobs}")"
            sync_artifact_name="${sync_artifact_prefix:?}-${job_index:?}"

            # https://docs.github.com/en/rest/actions/artifacts?apiVersion=2022-11-28#list-workflow-run-artifacts
            artifacts="$(gh api -X GET "/repos/{owner}/{repo}/actions/runs/${run_id:?}/artifacts")"

            sync_artifact_exists="$(jq --arg name "${sync_artifact_name:?}" '.artifacts | map(select(.name == $name)) | any' <<<"${artifacts}")"
            if [[ "${sync_artifact_exists}" == "true" ]]; then
                remaining_job_ids=("${remaining_job_ids[@]:1}")  # Drop the first element
                continue
            fi

            # Check if the job is still running
            is_running="$(gh api -X GET "/repos/{owner}/{repo}/actions/jobs/${job_id:?}" | jq '.conclusion == null')"
            if [[ "${is_running}" == "false" ]]; then
                remaining_job_ids=("${remaining_job_ids[@]:1}")  # Drop the first element
                continue
            fi
            
            sleep 5
        done

        end=$(date +%s)
        echo "Waited for other jobs for $((end-start)) seconds" >&2
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
        matrix_jobs: ${{ steps.matrix-jobs.outputs.json }}
        run_id: ${{ github.run_id }}
        self_job_id: ${{ steps.job.outputs.id }}
        sync_artifact_prefix: matrix-output-sync-${{ github.job }}
    - name: Merge job matrix output
      id: merge
      if: ${{ steps.matrix-jobs.outputs.num == strategy.job-total }}
      shell: bash
      run: |
        # Merge job matrix output

        # Specify our multiline output using GH action flavored heredocs
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
        {
            echo "json<<EOF"
            jq -s '[.[].outputs]' matrix-output/*/*.json
            echo "EOF"
        } | tee -a "$GITHUB_OUTPUT"
